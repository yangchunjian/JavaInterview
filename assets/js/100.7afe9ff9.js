(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{2358:function(a,s,t){"use strict";t.r(s);var n=t(0),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),s("p",[a._v("最大树 定义：一棵树，并满足：其中每个节点的值都大于其子树中的任何其他值。")]),a._v(" "),s("p",[a._v("给你最大树的根节点 root 和一个整数 val 。")]),a._v(" "),s("p",[a._v("就像 之前的问题 那样，给定的树是利用 Construct(a) 例程从列表 a（root = Construct(a)）递归地构建的：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("如果 a 为空，返回 null 。\n否则，令 a[i] 作为 a 的最大元素。创建一个值为 a[i] 的根节点 root 。\nroot 的左子树将被构建为 Construct([a[0], a[1], ..., a[i - 1]]) 。\nroot 的右子树将被构建为 Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]) 。\n返回 root 。\n")])])]),s("p",[a._v("请注意，题目没有直接给出 a ，只是给出一个根节点 root = Construct(a) 。")]),a._v(" "),s("p",[a._v("假设 b 是 a 的副本，并在末尾附加值 val。题目数据保证 b 中的值互不相同。")]),a._v(" "),s("p",[a._v("返回 Construct(b) 。")]),a._v(" "),s("p"),a._v(" "),s("p",[a._v("示例 1：")]),a._v(" "),s("p",[s("img",{attrs:{src:t(937),alt:""}})]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("输入：root = [4,1,3,null,null,2], val = 5\n输出：[5,4,null,1,3,null,null,2]\n解释：a = [1,4,2,3], b = [1,4,2,3,5]\n")])])]),s("p",[a._v("示例 2：")]),a._v(" "),s("p",[s("img",{attrs:{src:t(938),alt:""}})]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("输入：root = [5,2,4,null,1], val = 3\n输出：[5,2,4,null,1,null,3]\n解释：a = [2,1,5,4], b = [2,1,5,4,3]\n")])])]),s("p",[a._v("示例 3：")]),a._v(" "),s("p",[s("img",{attrs:{src:t(939),alt:""}})]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("输入：root = [5,2,3,null,1], val = 4\n输出：[5,2,4,null,1,3]\n解释：a = [2,1,5,3], b = [2,1,5,3,4]\n")])])]),s("p"),a._v(" "),s("p",[a._v("提示：")]),a._v(" "),s("ul",[s("li",[a._v("树中节点数目在范围 [1, 100] 内")]),a._v(" "),s("li",[a._v("1 <= Node.val <= 100")]),a._v(" "),s("li",[a._v("树中的所有值 互不相同")]),a._v(" "),s("li",[a._v("1 <= val <= 100")])]),a._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[a._v("#")]),a._v(" 思路")]),a._v(" "),s("p",[a._v("题目的意思是本来构造最大数的数组是A，在A中找出最大的值当做根，最大值左边的值为左子树，右边的数组为右子树。")]),a._v(" "),s("p",[a._v("而现在向A的后面插入了val，如果val是最大的，那么根节点的值就要是val，val前面的数（也就是前面的整棵树）做为val的左子树。如果val不是最大的，那么就把val往右子树上面插（val的位置是最后，肯定在最大值右边）。")]),a._v(" "),s("p",[a._v("所以也就是向最大树root中添加一值为val的节点，如果val大于root的值，那么就把root当做值为val节点左孩子，否则，就把val插入到右孩子的相应位置。")]),a._v(" "),s("p",[a._v("就是向最大树root中添加一值为val的节点，如果val大于root的值，那么就把root当做值为val节点左孩子，否则，就把val插入到右孩子的相应位置。")]),a._v(" "),s("h2",{attrs:{id:"解法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解法"}},[a._v("#")]),a._v(" 解法")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  题目的意思是本来构造最大数的数组是A，在A中找出最大的值当做根，最大值左边的值为左子树，右边的数组为右子树。")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 而现在向A的后面插入了val，如果val是最大的，那么根节点的值就要是val，val前面的数（也就是前面的整棵树）做为val的左子树。如果val不是最大的，那么就把val往右子树上面插（val的位置是最后，肯定在最大值右边）。")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 所以也就是向最大树root中添加一值为val的节点，如果val大于root的值，那么就把root当做值为val节点左孩子，否则，就把val插入到右孩子的相应位置。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Solution")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("insertIntoMaxTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("root"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("insertIntoMaxTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports},937:function(a,s,t){a.exports=t.p+"assets/img/maximum-binary-tree-1-2.d37f68b0.png"},938:function(a,s,t){a.exports=t.p+"assets/img/maximum-binary-tree-2-2.4a3b9361.png"},939:function(a,s,t){a.exports=t.p+"assets/img/maximum-binary-tree-3-2.1df74064.png"}}]);